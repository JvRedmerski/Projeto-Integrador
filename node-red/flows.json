[
    {
        "id": "0bdcbfbb92e8e12f",
        "type": "tab",
        "label": "Pedidos SQLite",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0c2a3c99c7e43a10",
        "type": "http in",
        "z": "0bdcbfbb92e8e12f",
        "name": "Receber Pedido",
        "url": "/pedido",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "74061dbb3c22ec8b"
            ]
        ]
    },
    {
        "id": "74061dbb3c22ec8b",
        "type": "json",
        "z": "0bdcbfbb92e8e12f",
        "name": "Parse JSON",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "95e7c496d6a8d829",
                "8b172b3ab00b345b",
                "aa3be72826696712",
                "eec5ca02dbccb097"
            ]
        ]
    },
    {
        "id": "8b172b3ab00b345b",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Preparar INSERT cliente",
        "func": "if (typeof msg.payload === \"string\") {\n    // Se msg.payload for uma string direta (ex: \"João\")\n    msg.nome = msg.payload;\n} else {\n    // Se msg.payload for um objeto (ex: { nome: \"João\" })\n    // tenta pegar msg.payload.nome, ou coloca \"Desconhecido\" se não existir\n    msg.nome = msg.payload.nome;\n}\n\nmsg.topic = \"INSERT INTO clientes (nome) VALUES ($nome)\";\nmsg.payload = [msg.nome];\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "13ff9b6adfa8a72c"
            ]
        ]
    },
    {
        "id": "13ff9b6adfa8a72c",
        "type": "sqlite",
        "z": "0bdcbfbb92e8e12f",
        "mydb": "23892abdd9f1d5ab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Inserir cliente",
        "x": 1020,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6b47dcd93fd4f91e",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Gerar pedido e salvar",
        "func": "const gerarCodigo = (tam = 8) => {\n    const c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    return Array.from({ length: tam }, () => c[Math.floor(Math.random() * c.length)]).join(\"\");\n};\n\nfunction dataHojeFormatada() {\n    const hoje = new Date();\n\n    const ano = hoje.getFullYear();\n    const mes = String(hoje.getMonth() + 1).padStart(2, '0'); // meses começam do 0\n    const dia = String(hoje.getDate()).padStart(2, '0');\n\n    return `${ano}-${mes}-${dia}`;\n}\n\nconst codigo = gerarCodigo();\nlet data = dataHojeFormatada();\n\nmsg.codigoPedido = codigo;\nmsg.id_cliente = msg.payload[0].id_cliente;\nmsg.topic = \"INSERT INTO pedidos (pedido_numero, id_cliente, data_pedido) VALUES ($codigoPedido, $id_cliente, $data)\";\nmsg.payload = [msg.codigoPedido, msg.id_cliente, data];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "e2702e24032d72b6",
                "5168f5151900f1d5",
                "0bf3bbb3bc4e71fc"
            ]
        ]
    },
    {
        "id": "e2702e24032d72b6",
        "type": "sqlite",
        "z": "0bdcbfbb92e8e12f",
        "mydb": "23892abdd9f1d5ab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Inserir pedido",
        "x": 900,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a453401c3b1ae9f0",
        "type": "sqlite",
        "z": "0bdcbfbb92e8e12f",
        "mydb": "23892abdd9f1d5ab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Inserir itens",
        "x": 1510,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "eec5ca02dbccb097",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "SELECT Nome",
        "func": "if (typeof msg.payload === \"string\") {\n    // Se msg.payload for uma string direta (ex: \"João\")\n    msg.nome = msg.payload;\n} else {\n    // Se msg.payload for um objeto (ex: { nome: \"João\" })\n    // tenta pegar msg.payload.nome, ou coloca \"Desconhecido\" se não existir\n    msg.nome = msg.payload.nome;\n}\nmsg.topic = \"SELECT id_cliente FROM Clientes WHERE nome = $nome\";\nmsg.payload = [msg.nome];  \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 580,
        "wires": [
            [
                "64d7f59997319598"
            ]
        ]
    },
    {
        "id": "64d7f59997319598",
        "type": "sqlite",
        "z": "0bdcbfbb92e8e12f",
        "mydb": "23892abdd9f1d5ab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SELECT Nome",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "6b47dcd93fd4f91e"
            ]
        ]
    },
    {
        "id": "5168f5151900f1d5",
        "type": "join",
        "z": "0bdcbfbb92e8e12f",
        "name": "JOIN Itens_Pedido",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "149044635898781c",
                "d12a4b316469bef7"
            ]
        ]
    },
    {
        "id": "9a387fa2133dfb14",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 500,
        "wires": []
    },
    {
        "id": "aa3be72826696712",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Preparar INSERT cliente",
        "func": "msg.payload = [\n    msg.payload.pino1,\n    msg.payload.pino2,\n    msg.payload.pino3\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "5168f5151900f1d5",
                "52eeda6116456fac"
            ]
        ]
    },
    {
        "id": "149044635898781c",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Preparar Itens_Pedido",
        "func": "const nomesPorPino = msg.payload[0]; // ex: [ [\"redonda\", \"hexagonal\", \"quadrada\"], ... ]\nconst info_pedido = msg.payload[1];  // ex: [123] → número do pedido\n\nconst codigo_pedido = info_pedido[0];\n\nconst mapaItens = {\n  \"quadrada\": 1,\n  \"hexagonal\": 2,\n  \"redonda\": 3\n};\n\nconst resultado = [];\n\n// Loop pelos pinos (índice de 0 a 2)\nfor (let i = 0; i < nomesPorPino.length; i++) {\n  const nomes = nomesPorPino[i]; // [\"redonda\", \"hexagonal\", \"quadrada\"]\n  const contagem = {};\n\n  // Contar itens por nome\n  for (const nome of nomes) {\n    const nomeLower = nome.toLowerCase();\n    if (mapaItens[nomeLower]) {\n      contagem[nomeLower] = (contagem[nomeLower] || 0) + 1;\n    }\n  }\n\n  // Criar inserts para este pino\n  for (const [nome, quantidade] of Object.entries(contagem)) {\n    const id_item = mapaItens[nome];\n    const pino = i + 1; // Pino 1, 2, 3\n\n    resultado.push({\n      topic: \"INSERT INTO Itens_Pedido (pedido_numero, id_item, quantidade, pino) VALUES ($codigo_pedido, $id_item, $quantidade, $pino)\",\n      payload: [codigo_pedido, id_item, quantidade, pino]\n    });\n  }\n}\n\nreturn [resultado];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 420,
        "wires": [
            [
                "9a387fa2133dfb14",
                "a453401c3b1ae9f0"
            ]
        ]
    },
    {
        "id": "207253c27c5d669a",
        "type": "telegram receiver",
        "z": "0bdcbfbb92e8e12f",
        "name": "manufaturvaAvancada",
        "bot": "321c869846817278",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "ed9132cbc765c80e"
            ],
            []
        ]
    },
    {
        "id": "f7bcddba87d3ebda",
        "type": "telegram sender",
        "z": "0bdcbfbb92e8e12f",
        "name": "",
        "bot": "321c869846817278",
        "haserroroutput": false,
        "outputs": 1,
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ed9132cbc765c80e",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Controle de pedido",
        "func": "let chatId = msg.payload.chatId;\nlet texto = msg.payload.content;\nlet estado = flow.get(chatId + \"_estado\");\nlet pedido = flow.get(chatId + \"_pedido\") || [];\n\nif (texto === \"/start\") {\n    flow.set(chatId + \"_estado\", \"awaiting_name\");\n    flow.set(chatId + \"_pedido\", []);\n    \n    msg.payload = {\n        chatId,\n        type: \"message\",\n        content: \"Pedido iniciado! Qual é o seu nome?\"\n    };\n    return msg;\n}\n\nif (estado === \"awaiting_name\") {\n    flow.set(chatId + \"_nome\", texto);\n    flow.set(chatId + \"_estado\", \"awaiting_item_1\");\n    \n    msg.payload = {\n        chatId,\n        type: \"message\",\n        content: `Olá, ${texto}! Escolha a primeira peça:`,\n        options: {\n            reply_markup: {\n                inline_keyboard: [\n                    [{ text: \"Redonda\", callback_data: \"Redonda\" }],\n                    [{ text: \"Hexagonal\", callback_data: \"Hexagonal\" }],\n                    [{ text: \"Quadrada\", callback_data: \"Quadrada\" }]\n                ]\n            }\n        }\n    };\n    return msg;\n}\n\nreturn null; // ignora outras mensagens\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "f7bcddba87d3ebda"
            ]
        ]
    },
    {
        "id": "973c00cc34a8456e",
        "type": "telegram event",
        "z": "0bdcbfbb92e8e12f",
        "name": "",
        "bot": "321c869846817278",
        "event": "callback_query",
        "autoanswer": false,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "c269a0291bfb85dd"
            ]
        ]
    },
    {
        "id": "c269a0291bfb85dd",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Click pedido",
        "func": "const chatId = msg.payload.chatId;\nconst escolha = msg.payload.content;\nconst nome = flow.get(chatId + \"_nome\") || \"Usuário\";\n\n// Valida escolha recebida\nconst validas = [\"Redonda\", \"Hexagonal\", \"Quadrada\"];\nif (!validas.includes(escolha)) {\n    node.warn(`Escolha inválida recebida: ${escolha}`);\n    return [null, null];\n}\n\n// Inicializa estado e pedidos\nlet estado = flow.get(chatId + \"_estado\") || { pinoAtual: 1, etapa: 0 };\nif (typeof estado !== \"object\" || ![1, 2, 3].includes(estado.pinoAtual) || typeof estado.etapa !== \"number\") {\n    node.warn(\"Estado corrompido. Reinicializando.\");\n    estado = { pinoAtual: 1, etapa: 0 };\n}\n\nlet pedidos = flow.get(chatId + \"_pedidos\") || { pino1: [], pino2: [], pino3: [] };\nif (!Array.isArray(pedidos.pino1) || !Array.isArray(pedidos.pino2) || !Array.isArray(pedidos.pino3)) {\n    node.warn(\"Pedidos corrompidos. Reinicializando.\");\n    pedidos = { pino1: [], pino2: [], pino3: [] };\n}\n\n// Debug logs\nnode.warn(`Chat ID: ${chatId}`);\nnode.warn(`Escolha recebida: ${escolha}`);\nnode.warn(`Estado atual: ${JSON.stringify(estado)}`);\nnode.warn(`Pedidos atuais: ${JSON.stringify(pedidos)}`);\n\n// Adiciona a peça ao pino atual\nconst pinoKey = `pino${estado.pinoAtual}`;\nif (!Array.isArray(pedidos[pinoKey])) {\n    node.warn(`Pino ${pinoKey} não é um array. Inicializando.`);\n    pedidos[pinoKey] = [];\n}\npedidos[pinoKey].push(escolha);\nestado.etapa += 1;\n\n// Salva estado e pedidos\nflow.set(chatId + \"_estado\", estado);\nflow.set(chatId + \"_pedidos\", pedidos);\n\n// Se completou 3 peças no pino atual\nif (estado.etapa === 3) {\n    const confirmacaoPino = {\n        payload: {\n            chatId,\n            type: \"message\",\n            content: `✅ Peças escolhidas para o pino ${estado.pinoAtual}:\\n- ${pedidos[pinoKey].join(\"\\n- \")}`\n        }\n    };\n\n    estado.pinoAtual += 1;\n    estado.etapa = 0;\n\n    // Se todos os pinos foram preenchidos\n    if (estado.pinoAtual > 3) {\n        const mensagemFinal = {\n            payload: {\n                chatId,\n                type: \"message\",\n                content: `🎉 Obrigado, ${nome}! Seu pedido foi registrado:\\n\\n🧩 Pino 1: ${pedidos.pino1.join(\", \")}\\n🧩 Pino 2: ${pedidos.pino2.join(\", \")}\\n🧩 Pino 3: ${pedidos.pino3.join(\", \")}`\n            }\n        };\n\n        const mensagemInterna = {\n            cliente: nome,\n            chatId,\n            payload: {\n                pino1: pedidos.pino1,\n                pino2: pedidos.pino2,\n                pino3: pedidos.pino3\n            }\n        };\n\n        node.warn(\"Pedido finalizado. Dados enviados internamente:\");\n        node.warn(JSON.stringify(mensagemInterna));\n\n        // Limpa estado e pedidos\n        flow.set(chatId + \"_estado\", null);\n        flow.set(chatId + \"_pedidos\", null);\n\n        return [[confirmacaoPino, mensagemFinal], mensagemInterna];\n    }\n\n    // Próximo pino\n    flow.set(chatId + \"_estado\", estado);\n    flow.set(chatId + \"_pedidos\", pedidos);\n\n    const novaPergunta = {\n        payload: {\n            chatId,\n            type: \"message\",\n            content: `Vamos montar o pino ${estado.pinoAtual}. Escolha a primeira peça:`,\n            options: {\n                reply_markup: {\n                    inline_keyboard: [\n                        [{ text: \"Redonda\", callback_data: \"Redonda\" }],\n                        [{ text: \"Hexagonal\", callback_data: \"Hexagonal\" }],\n                        [{ text: \"Quadrada\", callback_data: \"Quadrada\" }]\n                    ]\n                }\n            }\n        }\n    };\n\n    return [[confirmacaoPino, novaPergunta], null];\n}\n\n// Ainda há peças pendentes no pino atual\nmsg.payload = {\n    chatId,\n    type: \"message\",\n    content: `Escolha a próxima peça para o pino ${estado.pinoAtual}:`,\n    options: {\n        reply_markup: {\n            inline_keyboard: [\n                [{ text: \"Redonda\", callback_data: \"Redonda\" }],\n                [{ text: \"Hexagonal\", callback_data: \"Hexagonal\" }],\n                [{ text: \"Quadrada\", callback_data: \"Quadrada\" }]\n            ]\n        }\n    }\n};\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "41946784d6850fcd",
                "402bf3d626841810"
            ],
            [
                "f97c4518999b93e1",
                "15ce6e702d84a4a4"
            ]
        ]
    },
    {
        "id": "41946784d6850fcd",
        "type": "telegram sender",
        "z": "0bdcbfbb92e8e12f",
        "name": "",
        "bot": "321c869846817278",
        "haserroroutput": false,
        "outputs": 1,
        "x": 590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f97c4518999b93e1",
        "type": "function",
        "z": "0bdcbfbb92e8e12f",
        "name": "Payload com dados do pedido",
        "func": "const chatId = msg.chatId;\nconst nome = msg.cliente;\nconst payload = msg.payload || {};\n\n// Valida a estrutura do payload\nif (!Array.isArray(payload.pino1) || !Array.isArray(payload.pino2) || !Array.isArray(payload.pino3)) {\n    node.warn(`Payload inválido. Estrutura esperada: { pino1: [], pino2: [], pino3: [] }. Recebido: ${JSON.stringify(payload)}`);\n    return [null, null];\n}\n\nif (payload.pino1.length !== 3 || payload.pino2.length !== 3 || payload.pino3.length !== 3) {\n    node.warn(`Cada pino deve conter exatamente 3 peças. Recebido: pino1=${payload.pino1.length}, pino2=${payload.pino2.length}, pino3=${payload.pino3.length}`);\n    return [null, null];\n}\n\n// Debug logs\nnode.warn(`Chat ID: ${chatId}`);\nnode.warn(`Nome: ${nome}`);\nnode.warn(`Pedidos recebidos: ${JSON.stringify(payload)}`);\n\n// Prepara mensagens de saída\nconst msgNome = {\n    payload: nome\n};\n\nconst msgItens = {\n    payload: {\n        pino1: payload.pino1,\n        pino2: payload.pino2,\n        pino3: payload.pino3\n    }\n};\n\nreturn [msgNome, msgItens];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 200,
        "wires": [
            [
                "8b172b3ab00b345b",
                "eec5ca02dbccb097"
            ],
            [
                "aa3be72826696712"
            ]
        ]
    },
    {
        "id": "d12a4b316469bef7",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 340,
        "wires": []
    },
    {
        "id": "0bf3bbb3bc4e71fc",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 680,
        "wires": []
    },
    {
        "id": "95e7c496d6a8d829",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 200,
        "wires": []
    },
    {
        "id": "52eeda6116456fac",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "402bf3d626841810",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "15ce6e702d84a4a4",
        "type": "debug",
        "z": "0bdcbfbb92e8e12f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 280,
        "wires": []
    },
    {
        "id": "23892abdd9f1d5ab",
        "type": "sqlitedb",
        "db": "C:\\Users\\JV\\Desktop\\Integrative Project\\Projeto-Integrador\\Pedidos.db",
        "mode": "READWRITE"
    },
    {
        "id": "321c869846817278",
        "type": "telegram bot",
        "botname": "manufaturaAvancada_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    }
]